<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= product.name %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" integrity="sha384-k6RqeWeci5ZR/Lv4MR0sA0FfDOM7F7HvX+io0M6dR9eE5pAXhTSTsABos4aK/a5h" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="sha384-jLKHWM6YzI2bF5s5q6rQqDd0DybebseZ74mWxnE4wzTosfn4/J2d2lw6ZQp8qaeG" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/@joeattardi/emoji-button@4.6.1/dist/index.min.js"></script>

  <link rel="stylesheet" href="https://emoji-button.js.org/styles.css">
  <style>
    body {
      font-family: 'Roboto', sans-serif;
    }

    .card-img-top {

      border-bottom: 1px solid #eee;
    }

    .navbar-brand img {
      height: 100px;
      width: 250px;
    }

    .navbar-nav .nav-link {
      font-size: 1.5rem;
      margin-left: 2rem;
    }

    .navbar-text {
      font-size: 1.5rem;
    }

    .card-title {
      font-size: 2rem;
      font-weight: bold;
      margin-bottom: 1rem;
    }

    .btn-chat {
      font-size: 1.5rem;
      background-color: transparent;
      border: none;
      color: black;
      position: fixed;
      bottom: 0;
      right: 0;
      margin: 20px;
    }

    .btn-chat:hover {
      background-color: #686D76;
      color: #ffffff;
    }

    .btn-orange {
      background-color: #DC5F00;
      color: white;
      border: none;
      padding: 10px 30px;
      border-radius: 5px;
      cursor: pointer;
    }

    .strong {
      color: orange;
      font-size: 1.5rem;
      font-weight: bold;
    }

    .card-textd {
      color: #868686;
      font-size: 1.1rem;
      font-weight: 300;
      margin-top: -2rem;
      /* ‡∏•‡∏î margin-top ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô */
    }

    .location-text {
      font-weight: bold;
      font-size: 1.1rem;
      color: #495057;
    }

    .card-textd,
    .location-text,
    .strong,
    .font-weight-bold {
      margin-bottom: 1rem;
      font-size: 1rem;
    }

    .chat-window {
    position: fixed;
    bottom: 100px;
    right: 20px;
    width: 300px;
    border: 1px solid #ccc;
    background: #fff;
    display: none;
    flex-direction: column;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    border-radius: 10px;
    overflow: hidden;
}

.chat-header {
    padding: 10px;
    background-color: #DC5F00;
    color: white;
    text-align: center;
    font-weight: bold;
}

.chat-messages {
    flex: 1;
    padding: 10px;
    overflow-y: auto;
    max-height: 300px;
    background-color: #f7f7f7;
}

.chat-input {
    display: flex;
    align-items: center;
    border-top: 1px solid #ccc;
    background: #f0f0f0;
}

.chat-input input {
    flex: 1;
    padding: 10px;
    border: none;
    border-right: 1px solid #ccc;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
}

.chat-input button {
    padding: 10px;
    border: none;
    background-color: #DC5F00;
    color: #fff;
    cursor: pointer;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
}

    .chat-history {
      margin-top: 20px;
    }

    .chat-message {
      margin-bottom: 10px;
    padding: 10px;
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .chat-message.user {
      text-align: right;
      background-color: #d1ffd6;
    }

    .chat-message.other {
      text-align: left;
    background-color: #f0f0f0;
    }

    .camera-icon {
    font-size: 2rem;
    color: black;
    cursor: pointer;
    margin-right: 10px;
    display: flex;
    align-items: center;
}


    .camera-icon:hover {
      color: #8d3b05;
    }

    .hidden-file-input {
      display: none;
    }

    .img-pro {
      width: 100px;
      /* ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á */
      height: 100px;
      /* ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á */
      object-fit: cover;
      /* ‡πÉ‡∏´‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏á‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î */
      border-radius: 50%;
      /* ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏á‡∏Å‡∏•‡∏° */
      margin: 10px auto;
      /* ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á */
      margin-left: 0px;
    }

    .container {
      margin-top: 3rem;
    }

    .card-body {
      padding: 2rem;
    }

    /* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ */
    .emoji-picker-button {
    background: none;
    border: none;
    cursor: pointer;
    font-size: 24px;
    margin-left: 10px;
}
  </style>
</head>

<body>
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
      <a class="navbar-brand" href="/"><img src="/images/Logoo.png" alt="Logo"></a>
      <div class="collapse navbar-collapse">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link" href="/upload">‡∏•‡∏á‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/save-offer">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/notifications">‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/settings">‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå</a>
          </li>
        </ul>
        <span class="navbar-text me-3">
          <%= name %>
        </span>
        <a href="/logout" class="btn btn-danger">Logout</a>
      </div>
    </div>
  </nav>

  <div class="container mt-5">
    <div class="row">
      <div class="col-md-6">
        <div class="card">
          <img src="<%= product.image %>" class="card-img-top img-fluid" alt="<%= product.name %>">
        </div>
      </div>
      <div class="col-md-6">
        <div class="card-body">
          <h5 class="card-title"><%= product.name %></h5>
          <br><br><br>
          <p class="card-textd"><%= product.description %></p>
          <p class="card-text location-text">Location: <%= product.location %></p>
          <p class="strong">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: <%= product.status %></p>
      
            <img src="<%= product.profile_image %>" class="card-img-top img-pro" alt="<%= product.profile_image %>">
        </a>
        
        <p class="font-weight-bold text-dark">‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢ 
          <a href="/view-user/<%= product.user_id %>"><%= product.user_name %></a>
      </p>
      



          <% if (name !== product.user_name) { %>
          <button class="btn btn-orange btn-chat" data-product-user="<%= product.user_name %>">‡πÅ‡∏ä‡∏ó</button>
          <% } %>
        </div>
      </div>
    </div>
  </div>

  <div class="chat-window" data-product-user="">
    <div class="chat-header"> ‡∏•‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢ <span id="chat-product-user"><%= product.user_name %></span></div>
    <div class="chat-messages" id="chat-messages"></div>
    <div class="chat-input">
      <input type="text" id="chat-input" placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì...">
      <button id="send-message">‡∏™‡πà‡∏á</button>
 
      <label class="camera-icon">
        üì∑
        <input type="file" class="hidden-file-input" accept="image/*" />
    </label>
    
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js" integrity="sha384-eMNOMzAplPvK7R5jz9yU8JO6STtUWiK+z3h+Qg6lz9zzTtmIMyn8ln4WllFITEQ/" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGKt+onT4K+zIJ3zcHPaYUqoVGOiASjFZgOlg/9E+4Pq/U3CZ1p3nE0cvjN" crossorigin="anonymous"></script>
  <script src="/socket.io/socket.io.js"></script>



  <script>
    document.addEventListener('DOMContentLoaded', function() {
        const userName = '<%= name %>';
        const productUser = '<%= product.user_name %>';
        const userID = '<%= userID %>';
        const chatButton = document.querySelector('.btn-chat');
        const chatWindow = document.querySelector('.chat-window');
        const chatMessages = document.getElementById('chat-messages');
        const chatInput = document.getElementById('chat-input');
        const sendMessageButton = document.getElementById('send-message');
        const fileInput = document.querySelector('.hidden-file-input');
        const socket = io({
            query: `userName=${userName}`
        });
    
        chatButton.addEventListener('click', () => {
            if (chatWindow.style.display === 'flex') {
                chatWindow.style.display = 'none';
            } else {
                chatWindow.style.display = 'flex';
                chatWindow.dataset.productUser = productUser;
                fetch(`/chat-history/${productUser}`)
                    .then(response => response.json())
                    .then(data => {
                        chatMessages.innerHTML = '';
                        data.forEach(msg => {
                            const messageElement = document.createElement('div');
                            messageElement.classList.add('chat-message');
                            if (msg.user_name === userName) {
                                messageElement.classList.add('user');
                            } else {
                                messageElement.classList.add('other');
                            }
                            if (msg.image_url) {
                                const imgElement = document.createElement('img');
                                imgElement.src = msg.image_url;
                                imgElement.style.maxWidth = '100%';
                                messageElement.appendChild(imgElement);
                            } else {
                                messageElement.innerHTML = `<strong>${msg.user_name}:</strong> ${msg.message} <br> <small>${msg.time}</small>`;
                            }
                            chatMessages.appendChild(messageElement);
                        });
                        chatMessages.scrollTop = chatMessages.scrollHeight;
                    })
                    .catch(error => console.error('Error fetching chat history:', error));
            }
        });
    
        sendMessageButton.addEventListener('click', () => {
            const message = chatInput.value;
            if (message.trim() !== '') {
                socket.emit('chat message', {
                    message,
                    user_name: userName,
                    productUser,
                    userID: userID
                });
                chatInput.value = '';
            }
        });
    
        fileInput.addEventListener('change', () => {
            const file = fileInput.files[0];
            if (file) {
                const formData = new FormData();
                formData.append('image', file);
    
                fetch('/upload-image', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        socket.emit('chat image', {
                            imageUrl: data.url,
                            user_name: userName,
                            productUser,
                            userID: userID
                        });
                    }
                })
                .catch(error => console.error('Error uploading image:', error));
            }
        });
    
        socket.on('chat message', (msg) => {
    if ((msg.user_name === userName && msg.product_user === productUser) || (msg.user_name === productUser && msg.product_user === userName)) {
        displayMessage(msg);
    }
});

socket.on('chat image', (msg) => {
    if ((msg.user_name === userName && msg.product_user === productUser) || (msg.user_name === productUser && msg.product_user === userName)) {
        displayImageMessage(msg);
    }
});

function displayMessage(msg) {
    const messageElement = document.createElement('div');
    messageElement.classList.add('chat-message');
    messageElement.classList.add(msg.user_name === userName ? 'user' : 'other');
    messageElement.innerHTML = `<strong>${msg.user_name}:</strong> ${msg.message} <br> <small>${msg.time}</small>`;
    chatMessages.appendChild(messageElement);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function displayImageMessage(msg) {
    const messageElement = document.createElement('div');
    messageElement.classList.add('chat-message');
    messageElement.classList.add(msg.user_name === userName ? 'user' : 'other');
    const imgElement = document.createElement('img');
    imgElement.src = msg.image_url;
    imgElement.alt = "Chat Image";
    imgElement.style.maxWidth = '100%';
    messageElement.appendChild(imgElement);
    messageElement.innerHTML += `<br><small>${msg.time}</small>`;
    chatMessages.appendChild(messageElement);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function sendImage(imageFile) {
    const reader = new FileReader();
    reader.onload = function(event) {
        const img = new Image();
        img.onload = function() {
            const canvas = document.createElement('canvas');
            const maxSize = 500; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            let width = img.width;
            let height = img.height;

            if (width > height) {
                if (width > maxSize) {
                    height *= maxSize / width;
                    width = maxSize;
                }
            } else {
                if (height > maxSize) {
                    width *= maxSize / height;
                    height = maxSize;
                }
            }

            canvas.width = width;
            canvas.height = height;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0, width, height);
            const resizedImageData = canvas.toDataURL('image/jpeg', 0.7); // ‡∏õ‡∏£‡∏±‡∏ö quality ‡∏Ç‡∏≠‡∏á JPEG ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

            socket.emit('chat image', {
                user_name: userName,
                product_user: productUser,
                image_url: resizedImageData,
                time: new Date().toLocaleTimeString()
            });
        };
        img.src = event.target.result;
    };
    reader.readAsDataURL(imageFile);
}

document.getElementById('imageInput').addEventListener('change', function(event) {
    const imageFile = event.target.files[0];
    sendImage(imageFile);
  });
});


    
    
    
      </script>
</body>

</html>